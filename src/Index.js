// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var EscapeHtml = require("./escapeHtml");

function escapeHtml(prim) {
  return EscapeHtml(prim);
}

function $$escape(s) {
  var s$1 = EscapeHtml(s);
  return s$1.replace(/ /g, "&nbsp;");
}

function currentLine(t) {
  return Belt_Option.getWithDefault(Belt_Array.get(t.text, t.cursor.y), "");
}

function getLine(t, y) {
  return Belt_Array.get(t.text, y);
}

function getLineAt(t, y) {
  return Belt_Option.getWithDefault(Belt_Array.get(t.text, y), "");
}

function cursorSegmented(t) {
  var l = currentLine(t);
  var before = l.substring(0, t.cursor.x);
  var after = l.substr(t.cursor.x);
  return [
          before,
          after
        ];
}

function toHtmlString(t) {
  return Belt_Array.mapWithIndex(t.text, (function (i, l) {
                  if (i === t.cursor.y) {
                    var match = cursorSegmented(t);
                    return "<p class='line'><span>" + $$escape(match[0]) + "</span><span id='cursor'></span><span>" + $$escape(match[1]) + "</span></p>";
                  }
                  var l$1 = l.length > 0 ? l : " ";
                  return "<p class='line'><span>" + $$escape(l$1) + "</span></p>";
                })).join("\n");
}

function render(t, dom) {
  dom.innerHTML = toHtmlString(t);
  
}

function insertLetter(t, letter) {
  var match = cursorSegmented(t);
  Belt_Array.set(t.text, t.cursor.y, match[0] + letter + match[1]);
  var init = t.cursor;
  return {
          cursor: {
            x: t.cursor.x + 1 | 0,
            y: init.y
          },
          text: t.text
        };
}

function carriageReturn(t) {
  var match = cursorSegmented(t);
  Belt_Array.set(t.text, t.cursor.y, match[0]);
  t.text.splice(t.cursor.y + 1 | 0, 0, match[1]);
  return {
          cursor: {
            x: 0,
            y: t.cursor.y + 1 | 0
          },
          text: t.text
        };
}

function arrowLeft(t) {
  var x = t.cursor.x;
  var y = t.cursor.y;
  var cursor = x === 0 ? (
      y === 0 ? ({
            x: 0,
            y: 0
          }) : ({
            x: getLineAt(t, y - 1 | 0).length,
            y: y - 1 | 0
          })
    ) : ({
        x: x - 1 | 0,
        y: y
      });
  return {
          cursor: cursor,
          text: t.text
        };
}

function arrowRight(t) {
  var x = t.cursor.x;
  var y = t.cursor.y;
  var l = currentLine(t);
  var lineLen = l.length;
  var cursor = x === lineLen ? (
      (y + 1 | 0) === t.text.length ? t.cursor : ({
            x: 0,
            y: y + 1 | 0
          })
    ) : ({
        x: x + 1 | 0,
        y: y
      });
  return {
          cursor: cursor,
          text: t.text
        };
}

function arrowDown(t) {
  var x = t.cursor.x;
  var y = t.cursor.y;
  var cursor;
  if ((y + 1 | 0) === t.text.length) {
    cursor = t.cursor;
  } else {
    var nextLineLen = getLineAt(t, y + 1 | 0).length;
    cursor = x > nextLineLen ? ({
          x: nextLineLen,
          y: y + 1 | 0
        }) : ({
          x: x,
          y: y + 1 | 0
        });
  }
  return {
          cursor: cursor,
          text: t.text
        };
}

function arrowUp(t) {
  var x = t.cursor.x;
  var y = t.cursor.y;
  var line = Belt_Array.get(t.text, y - 1 | 0);
  var cursor;
  if (line !== undefined) {
    var len = line.length;
    cursor = x > len ? ({
          x: len,
          y: y - 1 | 0
        }) : ({
          x: x,
          y: y - 1 | 0
        });
  } else {
    cursor = t.cursor;
  }
  return {
          cursor: cursor,
          text: t.text
        };
}

var TextOperations = {
  insertLetter: insertLetter,
  carriageReturn: carriageReturn,
  arrowLeft: arrowLeft,
  arrowRight: arrowRight,
  arrowDown: arrowDown,
  arrowUp: arrowUp
};

function handleEvent(tRef, dom, $$event) {
  var t = tRef.contents;
  var letter = $$event.key;
  var isContentKey = letter.length === 1;
  console.log(letter);
  if (isContentKey) {
    tRef.contents = insertLetter(t, letter);
  } else {
    switch (letter) {
      case "ArrowDown" :
          tRef.contents = arrowDown(t);
          break;
      case "ArrowLeft" :
          tRef.contents = arrowLeft(t);
          break;
      case "ArrowRight" :
          tRef.contents = arrowRight(t);
          break;
      case "ArrowUp" :
          tRef.contents = arrowUp(t);
          break;
      case "Enter" :
          tRef.contents = carriageReturn(t);
          break;
      default:
        
    }
  }
  return render(tRef.contents, dom);
}

var Editor = {
  $$escape: $$escape,
  currentLine: currentLine,
  getLine: getLine,
  getLineAt: getLineAt,
  cursorSegmented: cursorSegmented,
  toHtmlString: toHtmlString,
  render: render,
  TextOperations: TextOperations,
  handleEvent: handleEvent
};

function init(editorDom) {
  var state_cursor = {
    x: 3,
    y: 0
  };
  var state_text = [
    "Hello,",
    "This is a long line."
  ];
  var state = {
    cursor: state_cursor,
    text: state_text
  };
  var state$1 = {
    contents: state
  };
  editorDom.addEventListener("keydown", (function ($$event) {
          return handleEvent(state$1, editorDom, $$event);
        }));
  editorDom.focus();
  return render(state$1.contents, editorDom);
}

function start(param) {
  var editorDom = document.getElementById("editor");
  console.log("Hello!");
  return init(editorDom);
}

window.onload = start;

exports.escapeHtml = escapeHtml;
exports.Editor = Editor;
exports.init = init;
exports.start = start;
/*  Not a pure module */
