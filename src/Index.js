// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function cursorSegmented(t) {
  var l = Belt_Option.getWithDefault(Belt_Array.get(t.text, t.cursor.y), "");
  var before = l.substring(0, t.cursor.x);
  var after = l.substr(t.cursor.x);
  return [
          before,
          after
        ];
}

function toHtmlString(t) {
  return Belt_Array.mapWithIndex(t.text, (function (i, l) {
                  if (i !== t.cursor.y) {
                    return "<p class='line'>" + l + "</p>";
                  }
                  var match = cursorSegmented(t);
                  return "<p class='line'><span>" + match[0] + "</span><span id='cursor'></span><span>" + match[1] + "</span></p>";
                })).join("\n");
}

function render(t, dom) {
  dom.innerHTML = toHtmlString(t);
  
}

function handleEvent(tRef, dom, $$event) {
  var t = tRef.contents;
  var letter = $$event.key;
  var isContentKey = letter.length === 1;
  if (!isContentKey) {
    return ;
  }
  var match = cursorSegmented(t);
  Belt_Array.set(t.text, t.cursor.y, match[0] + letter + match[1]);
  var init = t.cursor;
  tRef.contents = {
    cursor: {
      x: t.cursor.x + 1 | 0,
      y: init.y
    },
    text: t.text
  };
  return render(tRef.contents, dom);
}

var Editor = {
  cursorSegmented: cursorSegmented,
  toHtmlString: toHtmlString,
  render: render,
  handleEvent: handleEvent
};

function init(editorDom) {
  var state = {
    contents: {
      cursor: {
        x: 3,
        y: 0
      },
      text: [
        "Hello,",
        "This is a long line."
      ]
    }
  };
  editorDom.addEventListener("keydown", (function ($$event) {
          return handleEvent(state, editorDom, $$event);
        }));
  editorDom.focus();
  return render(state.contents, editorDom);
}

function start(param) {
  var editorDom = document.getElementById("editor");
  console.log("Hello!");
  return init(editorDom);
}

window.onload = start;

exports.Editor = Editor;
exports.init = init;
exports.start = start;
/*  Not a pure module */
